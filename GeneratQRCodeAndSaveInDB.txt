1-
Sure, here's an example of a Django API that generates a QR code of a text provided as input and saves the generated QR code in the database.

First, make sure you have installed the following packages:

Django
qrcode
Pillow
Once installed, you can create a Django app using the following command in your terminal:
2-
python manage.py startapp qrcode_generator
3-

Then, create a models.py file in your qrcode_generator app and define a QRCode model to store the generated QR codes:

4-
# qrcode_generator/models.py

from django.db import models

class QRCode(models.Model):
    text = models.CharField(max_length=255)
    image = models.ImageField(upload_to='qrcodes')
    created_at = models.DateTimeField(auto_now_add=True)

5-
Next, create a serializers.py file in your qrcode_generator app to define a QRCodeSerializer that will be used to serialize and deserialize QRCode objects

6-
# qrcode_generator/serializers.py

from rest_framework import serializers
from .models import QRCode

class QRCodeSerializer(serializers.ModelSerializer):
    class Meta:
        model = QRCode
        fields = '__all__'


7-
Then, create a views.py file in your qrcode_generator app to define a view that generates the QR code, saves it in the database, and returns the serialized QR code object:



8-
# qrcode_generator/views.py

from io import BytesIO
import base64
import qrcode
from django.core.files.uploadedfile import InMemoryUploadedFile
from rest_framework import status
from rest_framework.decorators import api_view
from rest_framework.response import Response
from .models import QRCode
from .serializers import QRCodeSerializer

@api_view(['POST'])
def generate_qrcode(request):
    text = request.data.get('text', '')
    
    # Generate QR code image
    qr = qrcode.QRCode(version=1, error_correction=qrcode.constants.ERROR_CORRECT_L, box_size=10, border=4)
    qr.add_data(text)
    qr.make(fit=True)
    img = qr.make_image(fill_color="black", back_color="white")
    
    # Save image to memory buffer
    buffer = BytesIO()
    img.save(buffer, format='JPEG')
    buffer.seek(0)
    
    # Create InMemoryUploadedFile from memory buffer
    image = InMemoryUploadedFile(buffer, None, 'qrcode.jpg', 'image/jpeg', buffer.getbuffer().nbytes, None)
    
    # Save QR code to database
    qrcode_obj = QRCode(text=text, image=image)
    qrcode_obj.save()
    
    # Serialize QR code object and return response
    serializer = QRCodeSerializer(qrcode_obj)
    return Response(serializer.data, status=status.HTTP_201_CREATED)
9-
Finally, add a URL pattern to your urls.py file to map the generate_qrcode view to a URL


10-
# your_project/urls.py

from django.urls import path, include

urlpatterns = [
    path('api/', include('qrcode_generator.urls')),
]




11-
# qrcode_generator/urls.py

from django.urls import path
from .views import generate_qrcode

urlpatterns = [
    path('generate_qrcode/', generate_qrcode),
]



12-
That's it! Now you can start your Django server and test the API by sending a POST request to the generate_qrcode URL with a text parameter in the request body containing the text you want to generate a QR code for. The API will generate a QR


